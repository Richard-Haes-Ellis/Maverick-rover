ARM GAS  /tmp/ccDBxmC8.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB138:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
ARM GAS  /tmp/ccDBxmC8.s 			page 2


  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** #define START_FRAME (uint16_t)0xABCD // Start frame definition for reliable serial communication wi
  36:Core/Src/main.c **** /* USER CODE END PD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/main.c **** UART_HandleTypeDef huart1;
  45:Core/Src/main.c **** UART_HandleTypeDef huart2;
  46:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_rx;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_tx;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** // Global variables for serial communication with BLDC drivers
  51:Core/Src/main.c **** uint8_t idx = 0;                        // Index for new data pointer
  52:Core/Src/main.c **** uint16_t bufStartFrame;                 // Buffer Start Frame
  53:Core/Src/main.c **** uint8_t *p;                             // Pointer declaration for the new received data
  54:Core/Src/main.c **** uint8_t incomingByte;
  55:Core/Src/main.c **** uint8_t incomingBytePrev;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** typedef struct{
  58:Core/Src/main.c ****    uint16_t start;
  59:Core/Src/main.c ****    int16_t  steer;
  60:Core/Src/main.c ****    int16_t  speed;
  61:Core/Src/main.c ****    uint16_t checksum;
  62:Core/Src/main.c **** } SerialBLDCCommand;
  63:Core/Src/main.c **** SerialBLDCCommand Command;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** typedef struct{
  66:Core/Src/main.c ****    uint16_t start;
  67:Core/Src/main.c ****    int16_t  cmd1;
  68:Core/Src/main.c ****    int16_t  cmd2;
  69:Core/Src/main.c ****    int16_t  speedR_meas;
  70:Core/Src/main.c ****    int16_t  speedL_meas;
  71:Core/Src/main.c ****    int16_t  batVoltage;
  72:Core/Src/main.c ****    int16_t  boardTemp;
  73:Core/Src/main.c ****    uint16_t cmdLed;
  74:Core/Src/main.c ****    uint16_t checksum;
  75:Core/Src/main.c **** } SerialBLDCFeedback;
  76:Core/Src/main.c **** SerialBLDCFeedback Feedback;
  77:Core/Src/main.c **** SerialBLDCFeedback NewFeedback;
  78:Core/Src/main.c **** /* USER CODE END PV */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  81:Core/Src/main.c **** void SystemClock_Config(void);
  82:Core/Src/main.c **** static void MX_GPIO_Init(void);
  83:Core/Src/main.c **** static void MX_DMA_Init(void);
  84:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  85:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  86:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  87:Core/Src/main.c **** // BLDC Serial Communication function prototypes
  88:Core/Src/main.c **** void Send(int16_t uSteer, int16_t uSpeed);
  89:Core/Src/main.c **** void Receive();
ARM GAS  /tmp/ccDBxmC8.s 			page 3


  90:Core/Src/main.c **** /* USER CODE END PFP */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  93:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  96:Core/Src/main.c **** {
  97:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, "\r\nByte received ", sizeof("\r\nByte received "), HAL_MAX_DELAY); 
  98:Core/Src/main.c ****     //HAL_UART_Transmit(&huart2, &incomingByte, sizeof(incomingByte), HAL_MAX_DELAY); // Blocking
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****     // Since we have received 1byte of data, execute Receive() function to 
 101:Core/Src/main.c ****     // reconstruct package:
 102:Core/Src/main.c ****     Receive();
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****     // Tell DMA to receive more data in the same UART (1 byte)
 105:Core/Src/main.c ****     HAL_UART_Receive_DMA(&huart1, &incomingByte, sizeof(incomingByte));
 106:Core/Src/main.c **** }
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** // ########################## SEND ##########################
 109:Core/Src/main.c **** void Send(int16_t uSteer, int16_t uSpeed)
 110:Core/Src/main.c **** {
 111:Core/Src/main.c ****   // Create command
 112:Core/Src/main.c ****   Command.start    = (uint16_t)START_FRAME;
 113:Core/Src/main.c ****   Command.steer    = (int16_t)uSteer;
 114:Core/Src/main.c ****   Command.speed    = (int16_t)uSpeed;
 115:Core/Src/main.c ****   Command.checksum = (uint16_t)(Command.start ^ Command.steer ^ Command.speed);
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /*
 118:Core/Src/main.c ****   TODO : Transmit DMA does not work as expected. It only send one byte of data and then stops.
 119:Core/Src/main.c ****   Does circular mode solve it?
 120:Core/Src/main.c ****   */
 121:Core/Src/main.c ****   // Write to Serial
 122:Core/Src/main.c ****   //HAL_UART_Transmit_DMA(&huart1, (uint8_t *) &Command, sizeof(Command)); //Non-blocking mode with
 123:Core/Src/main.c ****   HAL_UART_Transmit(&huart1, (uint8_t *) &Command, sizeof(Command), HAL_MAX_DELAY); // Blocking
 124:Core/Src/main.c **** }
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** // ########################## RECEIVE ##########################
 127:Core/Src/main.c **** void Receive()
 128:Core/Src/main.c **** {
 129:Core/Src/main.c ****     if (idx == 0){
 130:Core/Src/main.c ****       bufStartFrame	= ((uint16_t)(incomingByte) << 8) | incomingBytePrev;       // Construct the st
 131:Core/Src/main.c ****     }
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     // Copy received data
 134:Core/Src/main.c ****     if (bufStartFrame == START_FRAME) {	                    // Initialize if new data is detected
 135:Core/Src/main.c ****         p       = (uint8_t *)&NewFeedback;
 136:Core/Src/main.c ****         *p++    = incomingBytePrev;
 137:Core/Src/main.c ****         *p++    = incomingByte;
 138:Core/Src/main.c ****         idx     = 2;	
 139:Core/Src/main.c ****     } else if (idx >= 2 && idx < sizeof(SerialBLDCFeedback)) {  // Save the new received data
 140:Core/Src/main.c ****         *p++    = incomingByte; 
 141:Core/Src/main.c ****         idx++;
 142:Core/Src/main.c ****     }	
 143:Core/Src/main.c ****     
 144:Core/Src/main.c ****     // Check if we reached the end of the package
 145:Core/Src/main.c ****     if (idx == sizeof(SerialBLDCFeedback)) {
 146:Core/Src/main.c ****         uint16_t checksum;
ARM GAS  /tmp/ccDBxmC8.s 			page 4


 147:Core/Src/main.c ****         checksum = (uint16_t)(NewFeedback.start ^ NewFeedback.cmd1 ^ NewFeedback.cmd2 ^ NewFeedback
 148:Core/Src/main.c ****                             ^ NewFeedback.batVoltage ^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****         // Check validity of the new data
 151:Core/Src/main.c ****         if (NewFeedback.start == START_FRAME && checksum == NewFeedback.checksum) {
 152:Core/Src/main.c ****             // Copy the new data
 153:Core/Src/main.c ****             memcpy(&Feedback, &NewFeedback, sizeof(SerialBLDCFeedback));
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****             // Print data to built-in Serial
 156:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.cmd1, sizeof(Feedback.cmd1), HAL_MAX_DELAY); // Bl
 157:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.cmd2, sizeof(Feedback.cmd2), HAL_MAX_DELAY); // Bl
 158:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.speedR_meas, sizeof(Feedback.speedR_meas), HAL_MAX
 159:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.speedL_meas, sizeof(Feedback.speedL_meas), HAL_MAX
 160:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.batVoltage, sizeof(Feedback.batVoltage), HAL_MAX_D
 161:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.boardTemp, sizeof(Feedback.boardTemp), HAL_MAX_DEL
 162:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.cmdLed, sizeof(Feedback.cmdLed), HAL_MAX_DELAY); /
 163:Core/Src/main.c ****         } else {
 164:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, "Non-valid data skipped", sizeof("Non-valid data skipped"), 
 165:Core/Src/main.c ****         }
 166:Core/Src/main.c ****         idx = 0;    // Reset the index (it prevents to enter in this if condition in the next cycle
 167:Core/Src/main.c ****     }
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****     // Update previous states
 170:Core/Src/main.c ****     incomingBytePrev = incomingByte;
 171:Core/Src/main.c **** }
 172:Core/Src/main.c **** /* USER CODE END 0 */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c **** /**
 175:Core/Src/main.c ****   * @brief  The application entry point.
 176:Core/Src/main.c ****   * @retval int
 177:Core/Src/main.c ****   */
 178:Core/Src/main.c **** int main(void)
 179:Core/Src/main.c **** {
 180:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* USER CODE END 1 */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 187:Core/Src/main.c ****   HAL_Init();
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END Init */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* Configure the system clock */
 194:Core/Src/main.c ****   SystemClock_Config();
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE END SysInit */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* Initialize all configured peripherals */
 201:Core/Src/main.c ****   MX_GPIO_Init();
 202:Core/Src/main.c ****   MX_DMA_Init();
 203:Core/Src/main.c ****   MX_USART1_UART_Init();
ARM GAS  /tmp/ccDBxmC8.s 			page 5


 204:Core/Src/main.c ****   MX_USART2_UART_Init();
 205:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /* USER CODE END 2 */
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* Infinite loop */
 210:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   // Receive data from UART (1 byte) and store in buffer.
 213:Core/Src/main.c ****   // HAL_UART_RxCpltCallback will be called when 1 byte has been received.
 214:Core/Src/main.c ****   HAL_UART_Receive_DMA (&huart1, &incomingByte, sizeof(incomingByte));
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, "Receiving Data\r\n", sizeof("Receiving Data\r\n"), HAL_MAX_DELAY); //
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   while (1)
 219:Core/Src/main.c ****   {
 220:Core/Src/main.c ****     // Blinking LED
 221:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 222:Core/Src/main.c ****     HAL_Delay(50);
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****     Send(0,1);
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****     /* USER CODE END WHILE */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 229:Core/Src/main.c ****   }
 230:Core/Src/main.c ****   /* USER CODE END 3 */
 231:Core/Src/main.c **** }
 232:Core/Src/main.c **** 
 233:Core/Src/main.c **** /**
 234:Core/Src/main.c ****   * @brief System Clock Configuration
 235:Core/Src/main.c ****   * @retval None
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c **** void SystemClock_Config(void)
 238:Core/Src/main.c **** {
 239:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 240:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 243:Core/Src/main.c ****   */
 244:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 245:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 246:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 247:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 248:Core/Src/main.c ****   */
 249:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 250:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 251:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 253:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 257:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 258:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 259:Core/Src/main.c ****   {
 260:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccDBxmC8.s 			page 6


 261:Core/Src/main.c ****   }
 262:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 263:Core/Src/main.c ****   */
 264:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 265:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 266:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 267:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 269:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     Error_Handler();
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c **** }
 276:Core/Src/main.c **** 
 277:Core/Src/main.c **** /**
 278:Core/Src/main.c ****   * @brief USART1 Initialization Function
 279:Core/Src/main.c ****   * @param None
 280:Core/Src/main.c ****   * @retval None
 281:Core/Src/main.c ****   */
 282:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 283:Core/Src/main.c **** {
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 292:Core/Src/main.c ****   huart1.Instance = USART1;
 293:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 294:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 295:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 296:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 297:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 298:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 299:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 300:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c **** }
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** /**
 311:Core/Src/main.c ****   * @brief USART2 Initialization Function
 312:Core/Src/main.c ****   * @param None
 313:Core/Src/main.c ****   * @retval None
 314:Core/Src/main.c ****   */
 315:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 316:Core/Src/main.c **** {
 317:Core/Src/main.c **** 
ARM GAS  /tmp/ccDBxmC8.s 			page 7


 318:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 325:Core/Src/main.c ****   huart2.Instance = USART2;
 326:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 327:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 328:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 329:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 330:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 331:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 332:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 333:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 334:Core/Src/main.c ****   {
 335:Core/Src/main.c ****     Error_Handler();
 336:Core/Src/main.c ****   }
 337:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c **** }
 342:Core/Src/main.c **** 
 343:Core/Src/main.c **** /**
 344:Core/Src/main.c ****   * Enable DMA controller clock
 345:Core/Src/main.c ****   */
 346:Core/Src/main.c **** static void MX_DMA_Init(void)
 347:Core/Src/main.c **** {
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   /* DMA controller clock enable */
 350:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* DMA interrupt init */
 353:Core/Src/main.c ****   /* DMA2_Stream2_IRQn interrupt configuration */
 354:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 355:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 356:Core/Src/main.c ****   /* DMA2_Stream7_IRQn interrupt configuration */
 357:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 358:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 359:Core/Src/main.c **** 
 360:Core/Src/main.c **** }
 361:Core/Src/main.c **** 
 362:Core/Src/main.c **** /**
 363:Core/Src/main.c ****   * @brief GPIO Initialization Function
 364:Core/Src/main.c ****   * @param None
 365:Core/Src/main.c ****   * @retval None
 366:Core/Src/main.c ****   */
 367:Core/Src/main.c **** static void MX_GPIO_Init(void)
 368:Core/Src/main.c **** {
  27              		.loc 1 368 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
ARM GAS  /tmp/ccDBxmC8.s 			page 8


  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 48
 369:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 369 0
  41 0004 0024     		movs	r4, #0
  42 0006 0394     		str	r4, [sp, #12]
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB4:
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 372:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 372 0
  49 0010 0094     		str	r4, [sp]
  50 0012 194B     		ldr	r3, .L3
  51 0014 1A6B     		ldr	r2, [r3, #48]
  52 0016 42F00402 		orr	r2, r2, #4
  53 001a 1A63     		str	r2, [r3, #48]
  54 001c 1A6B     		ldr	r2, [r3, #48]
  55 001e 02F00402 		and	r2, r2, #4
  56 0022 0092     		str	r2, [sp]
  57 0024 009A     		ldr	r2, [sp]
  58              	.LBE4:
  59              	.LBB5:
 373:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  60              		.loc 1 373 0
  61 0026 0194     		str	r4, [sp, #4]
  62 0028 1A6B     		ldr	r2, [r3, #48]
  63 002a 42F00802 		orr	r2, r2, #8
  64 002e 1A63     		str	r2, [r3, #48]
  65 0030 1A6B     		ldr	r2, [r3, #48]
  66 0032 02F00802 		and	r2, r2, #8
  67 0036 0192     		str	r2, [sp, #4]
  68 0038 019A     		ldr	r2, [sp, #4]
  69              	.LBE5:
  70              	.LBB6:
 374:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  71              		.loc 1 374 0
  72 003a 0294     		str	r4, [sp, #8]
  73 003c 1A6B     		ldr	r2, [r3, #48]
  74 003e 42F00202 		orr	r2, r2, #2
  75 0042 1A63     		str	r2, [r3, #48]
  76 0044 1B6B     		ldr	r3, [r3, #48]
  77 0046 03F00203 		and	r3, r3, #2
  78 004a 0293     		str	r3, [sp, #8]
  79 004c 029B     		ldr	r3, [sp, #8]
  80              	.LBE6:
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 377:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
ARM GAS  /tmp/ccDBxmC8.s 			page 9


  81              		.loc 1 377 0
  82 004e 0B4D     		ldr	r5, .L3+4
  83 0050 2246     		mov	r2, r4
  84 0052 4FF40051 		mov	r1, #8192
  85 0056 2846     		mov	r0, r5
  86 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL0:
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 380:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
  88              		.loc 1 380 0
  89 005c 4FF40053 		mov	r3, #8192
  90 0060 0393     		str	r3, [sp, #12]
 381:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  91              		.loc 1 381 0
  92 0062 0123     		movs	r3, #1
  93 0064 0493     		str	r3, [sp, #16]
 382:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  94              		.loc 1 382 0
  95 0066 0594     		str	r4, [sp, #20]
 383:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  96              		.loc 1 383 0
  97 0068 0694     		str	r4, [sp, #24]
 384:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  98              		.loc 1 384 0
  99 006a 03A9     		add	r1, sp, #12
 100 006c 2846     		mov	r0, r5
 101 006e FFF7FEFF 		bl	HAL_GPIO_Init
 102              	.LVL1:
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** }
 103              		.loc 1 386 0
 104 0072 09B0     		add	sp, sp, #36
 105              	.LCFI2:
 106              		.cfi_def_cfa_offset 12
 107              		@ sp needed
 108 0074 30BD     		pop	{r4, r5, pc}
 109              	.L4:
 110 0076 00BF     		.align	2
 111              	.L3:
 112 0078 00380240 		.word	1073887232
 113 007c 00080240 		.word	1073874944
 114              		.cfi_endproc
 115              	.LFE138:
 117              		.section	.text.MX_DMA_Init,"ax",%progbits
 118              		.align	1
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	MX_DMA_Init:
 125              	.LFB137:
 347:Core/Src/main.c **** 
 126              		.loc 1 347 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 8
 129              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccDBxmC8.s 			page 10


 130 0000 10B5     		push	{r4, lr}
 131              	.LCFI3:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 4, -8
 134              		.cfi_offset 14, -4
 135 0002 82B0     		sub	sp, sp, #8
 136              	.LCFI4:
 137              		.cfi_def_cfa_offset 16
 138              	.LBB7:
 350:Core/Src/main.c **** 
 139              		.loc 1 350 0
 140 0004 0024     		movs	r4, #0
 141 0006 0194     		str	r4, [sp, #4]
 142 0008 0D4B     		ldr	r3, .L7
 143 000a 1A6B     		ldr	r2, [r3, #48]
 144 000c 42F48002 		orr	r2, r2, #4194304
 145 0010 1A63     		str	r2, [r3, #48]
 146 0012 1B6B     		ldr	r3, [r3, #48]
 147 0014 03F48003 		and	r3, r3, #4194304
 148 0018 0193     		str	r3, [sp, #4]
 149 001a 019B     		ldr	r3, [sp, #4]
 150              	.LBE7:
 354:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 151              		.loc 1 354 0
 152 001c 2246     		mov	r2, r4
 153 001e 2146     		mov	r1, r4
 154 0020 3A20     		movs	r0, #58
 155 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 156              	.LVL2:
 355:Core/Src/main.c ****   /* DMA2_Stream7_IRQn interrupt configuration */
 157              		.loc 1 355 0
 158 0026 3A20     		movs	r0, #58
 159 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 160              	.LVL3:
 357:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 161              		.loc 1 357 0
 162 002c 2246     		mov	r2, r4
 163 002e 2146     		mov	r1, r4
 164 0030 4620     		movs	r0, #70
 165 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 166              	.LVL4:
 358:Core/Src/main.c **** 
 167              		.loc 1 358 0
 168 0036 4620     		movs	r0, #70
 169 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 170              	.LVL5:
 360:Core/Src/main.c **** 
 171              		.loc 1 360 0
 172 003c 02B0     		add	sp, sp, #8
 173              	.LCFI5:
 174              		.cfi_def_cfa_offset 8
 175              		@ sp needed
 176 003e 10BD     		pop	{r4, pc}
 177              	.L8:
 178              		.align	2
 179              	.L7:
 180 0040 00380240 		.word	1073887232
ARM GAS  /tmp/ccDBxmC8.s 			page 11


 181              		.cfi_endproc
 182              	.LFE137:
 184              		.section	.text.Send,"ax",%progbits
 185              		.align	1
 186              		.global	Send
 187              		.syntax unified
 188              		.thumb
 189              		.thumb_func
 190              		.fpu fpv4-sp-d16
 192              	Send:
 193              	.LFB131:
 110:Core/Src/main.c ****   // Create command
 194              		.loc 1 110 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              	.LVL6:
 199 0000 10B5     		push	{r4, lr}
 200              	.LCFI6:
 201              		.cfi_def_cfa_offset 8
 202              		.cfi_offset 4, -8
 203              		.cfi_offset 14, -4
 112:Core/Src/main.c ****   Command.steer    = (int16_t)uSteer;
 204              		.loc 1 112 0
 205 0002 094C     		ldr	r4, .L11
 206 0004 4AF6CD33 		movw	r3, #43981
 207 0008 2380     		strh	r3, [r4]	@ movhi
 113:Core/Src/main.c ****   Command.speed    = (int16_t)uSpeed;
 208              		.loc 1 113 0
 209 000a 6080     		strh	r0, [r4, #2]	@ movhi
 114:Core/Src/main.c ****   Command.checksum = (uint16_t)(Command.start ^ Command.steer ^ Command.speed);
 210              		.loc 1 114 0
 211 000c A180     		strh	r1, [r4, #4]	@ movhi
 115:Core/Src/main.c **** 
 212              		.loc 1 115 0
 213 000e 5840     		eors	r0, r0, r3
 214              	.LVL7:
 215 0010 00B2     		sxth	r0, r0
 216 0012 4840     		eors	r0, r0, r1
 217 0014 E080     		strh	r0, [r4, #6]	@ movhi
 123:Core/Src/main.c **** }
 218              		.loc 1 123 0
 219 0016 4FF0FF33 		mov	r3, #-1
 220 001a 0822     		movs	r2, #8
 221 001c 2146     		mov	r1, r4
 222              	.LVL8:
 223 001e 0348     		ldr	r0, .L11+4
 224 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 225              	.LVL9:
 226 0024 10BD     		pop	{r4, pc}
 227              	.L12:
 228 0026 00BF     		.align	2
 229              	.L11:
 230 0028 00000000 		.word	Command
 231 002c 00000000 		.word	huart1
 232              		.cfi_endproc
 233              	.LFE131:
ARM GAS  /tmp/ccDBxmC8.s 			page 12


 235              		.section	.text.Receive,"ax",%progbits
 236              		.align	1
 237              		.global	Receive
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	Receive:
 244              	.LFB132:
 128:Core/Src/main.c ****     if (idx == 0){
 245              		.loc 1 128 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249 0000 38B5     		push	{r3, r4, r5, lr}
 250              	.LCFI7:
 251              		.cfi_def_cfa_offset 16
 252              		.cfi_offset 3, -16
 253              		.cfi_offset 4, -12
 254              		.cfi_offset 5, -8
 255              		.cfi_offset 14, -4
 129:Core/Src/main.c ****       bufStartFrame	= ((uint16_t)(incomingByte) << 8) | incomingBytePrev;       // Construct the st
 256              		.loc 1 129 0
 257 0002 534B     		ldr	r3, .L24
 258 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 259 0006 3BB9     		cbnz	r3, .L14
 130:Core/Src/main.c ****     }
 260              		.loc 1 130 0
 261 0008 524A     		ldr	r2, .L24+4
 262 000a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 263 000c 524A     		ldr	r2, .L24+8
 264 000e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 265 0010 42EA0122 		orr	r2, r2, r1, lsl #8
 266 0014 5149     		ldr	r1, .L24+12
 267 0016 0A80     		strh	r2, [r1]	@ movhi
 268              	.L14:
 134:Core/Src/main.c ****         p       = (uint8_t *)&NewFeedback;
 269              		.loc 1 134 0
 270 0018 504A     		ldr	r2, .L24+12
 271 001a 1188     		ldrh	r1, [r2]
 272 001c 4AF6CD32 		movw	r2, #43981
 273 0020 9142     		cmp	r1, r2
 274 0022 17D0     		beq	.L21
 139:Core/Src/main.c ****         *p++    = incomingByte; 
 275              		.loc 1 139 0
 276 0024 023B     		subs	r3, r3, #2
 277 0026 DBB2     		uxtb	r3, r3
 278 0028 0F2B     		cmp	r3, #15
 279 002a 0AD8     		bhi	.L16
 140:Core/Src/main.c ****         idx++;
 280              		.loc 1 140 0
 281 002c 4C4A     		ldr	r2, .L24+16
 282 002e 1368     		ldr	r3, [r2]
 283 0030 591C     		adds	r1, r3, #1
 284 0032 1160     		str	r1, [r2]
 285 0034 474A     		ldr	r2, .L24+4
 286 0036 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccDBxmC8.s 			page 13


 287 0038 1A70     		strb	r2, [r3]
 141:Core/Src/main.c ****     }	
 288              		.loc 1 141 0
 289 003a 454A     		ldr	r2, .L24
 290 003c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 291 003e 0133     		adds	r3, r3, #1
 292 0040 1370     		strb	r3, [r2]
 293              	.L16:
 145:Core/Src/main.c ****         uint16_t checksum;
 294              		.loc 1 145 0
 295 0042 434B     		ldr	r3, .L24
 296 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 297 0046 122B     		cmp	r3, #18
 298 0048 13D0     		beq	.L22
 299              	.L17:
 170:Core/Src/main.c **** }
 300              		.loc 1 170 0
 301 004a 424B     		ldr	r3, .L24+4
 302 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 303 004e 424B     		ldr	r3, .L24+8
 304 0050 1A70     		strb	r2, [r3]
 305 0052 38BD     		pop	{r3, r4, r5, pc}
 306              	.L21:
 136:Core/Src/main.c ****         *p++    = incomingByte;
 307              		.loc 1 136 0
 308 0054 434A     		ldr	r2, .L24+20
 309 0056 404B     		ldr	r3, .L24+8
 310 0058 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 311 005a 1346     		mov	r3, r2
 312 005c 03F8021B 		strb	r1, [r3], #2
 137:Core/Src/main.c ****         idx     = 2;	
 313              		.loc 1 137 0
 314 0060 3F49     		ldr	r1, .L24+16
 315 0062 0B60     		str	r3, [r1]
 316 0064 3B4B     		ldr	r3, .L24+4
 317 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 318 0068 5370     		strb	r3, [r2, #1]
 138:Core/Src/main.c ****     } else if (idx >= 2 && idx < sizeof(SerialBLDCFeedback)) {  // Save the new received data
 319              		.loc 1 138 0
 320 006a 0222     		movs	r2, #2
 321 006c 384B     		ldr	r3, .L24
 322 006e 1A70     		strb	r2, [r3]
 323 0070 E7E7     		b	.L16
 324              	.L22:
 325              	.LBB8:
 147:Core/Src/main.c ****                             ^ NewFeedback.batVoltage ^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);
 326              		.loc 1 147 0
 327 0072 3C4A     		ldr	r2, .L24+20
 328 0074 1188     		ldrh	r1, [r2]
 329 0076 0BB2     		sxth	r3, r1
 330 0078 B2F90200 		ldrsh	r0, [r2, #2]
 331 007c 4340     		eors	r3, r3, r0
 332 007e B2F90400 		ldrsh	r0, [r2, #4]
 333 0082 4340     		eors	r3, r3, r0
 334 0084 B2F90600 		ldrsh	r0, [r2, #6]
 335 0088 4340     		eors	r3, r3, r0
 336 008a B2F90800 		ldrsh	r0, [r2, #8]
ARM GAS  /tmp/ccDBxmC8.s 			page 14


 337 008e 4340     		eors	r3, r3, r0
 148:Core/Src/main.c **** 
 338              		.loc 1 148 0
 339 0090 B2F90A00 		ldrsh	r0, [r2, #10]
 340 0094 4340     		eors	r3, r3, r0
 341 0096 B2F90C00 		ldrsh	r0, [r2, #12]
 342 009a 4340     		eors	r3, r3, r0
 343 009c B2F90E20 		ldrsh	r2, [r2, #14]
 344 00a0 5340     		eors	r3, r3, r2
 147:Core/Src/main.c ****                             ^ NewFeedback.batVoltage ^ NewFeedback.boardTemp ^ NewFeedback.cmdLed);
 345              		.loc 1 147 0
 346 00a2 9BB2     		uxth	r3, r3
 347              	.LVL10:
 151:Core/Src/main.c ****             // Copy the new data
 348              		.loc 1 151 0
 349 00a4 4AF6CD32 		movw	r2, #43981
 350 00a8 9142     		cmp	r1, r2
 351 00aa 0AD0     		beq	.L23
 352              	.L18:
 164:Core/Src/main.c ****         }
 353              		.loc 1 164 0
 354 00ac 4FF0FF33 		mov	r3, #-1
 355              	.LVL11:
 356 00b0 1722     		movs	r2, #23
 357 00b2 2D49     		ldr	r1, .L24+24
 358              	.LVL12:
 359 00b4 2D48     		ldr	r0, .L24+28
 360              	.LVL13:
 361 00b6 FFF7FEFF 		bl	HAL_UART_Transmit
 362              	.LVL14:
 363              	.L19:
 166:Core/Src/main.c ****     }
 364              		.loc 1 166 0
 365 00ba 0022     		movs	r2, #0
 366 00bc 244B     		ldr	r3, .L24
 367 00be 1A70     		strb	r2, [r3]
 368 00c0 C3E7     		b	.L17
 369              	.LVL15:
 370              	.L23:
 151:Core/Src/main.c ****             // Copy the new data
 371              		.loc 1 151 0 discriminator 1
 372 00c2 284A     		ldr	r2, .L24+20
 373 00c4 128A     		ldrh	r2, [r2, #16]
 374 00c6 9342     		cmp	r3, r2
 375 00c8 F0D1     		bne	.L18
 376              	.LBB9:
 153:Core/Src/main.c **** 
 377              		.loc 1 153 0
 378 00ca 294C     		ldr	r4, .L24+32
 379 00cc 254B     		ldr	r3, .L24+20
 380              	.LVL16:
 381 00ce 1D68     		ldr	r5, [r3]	@ unaligned
 382 00d0 5868     		ldr	r0, [r3, #4]	@ unaligned
 383              	.LVL17:
 384 00d2 9968     		ldr	r1, [r3, #8]	@ unaligned
 385              	.LVL18:
 386 00d4 DA68     		ldr	r2, [r3, #12]	@ unaligned
ARM GAS  /tmp/ccDBxmC8.s 			page 15


 387 00d6 2560     		str	r5, [r4]	@ unaligned
 388 00d8 6060     		str	r0, [r4, #4]	@ unaligned
 389 00da A160     		str	r1, [r4, #8]	@ unaligned
 390 00dc E260     		str	r2, [r4, #12]	@ unaligned
 391 00de 1B8A     		ldrh	r3, [r3, #16]	@ unaligned
 392              	.LVL19:
 393 00e0 2382     		strh	r3, [r4, #16]	@ unaligned
 156:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.cmd2, sizeof(Feedback.cmd2), HAL_MAX_DELAY); // Bl
 394              		.loc 1 156 0
 395 00e2 224D     		ldr	r5, .L24+28
 396 00e4 4FF0FF33 		mov	r3, #-1
 397 00e8 0222     		movs	r2, #2
 398 00ea A118     		adds	r1, r4, r2
 399 00ec 2846     		mov	r0, r5
 400 00ee FFF7FEFF 		bl	HAL_UART_Transmit
 401              	.LVL20:
 157:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.speedR_meas, sizeof(Feedback.speedR_meas), HAL_MAX
 402              		.loc 1 157 0
 403 00f2 4FF0FF33 		mov	r3, #-1
 404 00f6 0222     		movs	r2, #2
 405 00f8 211D     		adds	r1, r4, #4
 406 00fa 2846     		mov	r0, r5
 407 00fc FFF7FEFF 		bl	HAL_UART_Transmit
 408              	.LVL21:
 158:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.speedL_meas, sizeof(Feedback.speedL_meas), HAL_MAX
 409              		.loc 1 158 0
 410 0100 4FF0FF33 		mov	r3, #-1
 411 0104 0222     		movs	r2, #2
 412 0106 A11D     		adds	r1, r4, #6
 413 0108 2846     		mov	r0, r5
 414 010a FFF7FEFF 		bl	HAL_UART_Transmit
 415              	.LVL22:
 159:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.batVoltage, sizeof(Feedback.batVoltage), HAL_MAX_D
 416              		.loc 1 159 0
 417 010e 4FF0FF33 		mov	r3, #-1
 418 0112 0222     		movs	r2, #2
 419 0114 04F10801 		add	r1, r4, #8
 420 0118 2846     		mov	r0, r5
 421 011a FFF7FEFF 		bl	HAL_UART_Transmit
 422              	.LVL23:
 160:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.boardTemp, sizeof(Feedback.boardTemp), HAL_MAX_DEL
 423              		.loc 1 160 0
 424 011e 4FF0FF33 		mov	r3, #-1
 425 0122 0222     		movs	r2, #2
 426 0124 04F10A01 		add	r1, r4, #10
 427 0128 2846     		mov	r0, r5
 428 012a FFF7FEFF 		bl	HAL_UART_Transmit
 429              	.LVL24:
 161:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, &Feedback.cmdLed, sizeof(Feedback.cmdLed), HAL_MAX_DELAY); /
 430              		.loc 1 161 0
 431 012e 4FF0FF33 		mov	r3, #-1
 432 0132 0222     		movs	r2, #2
 433 0134 04F10C01 		add	r1, r4, #12
 434 0138 2846     		mov	r0, r5
 435 013a FFF7FEFF 		bl	HAL_UART_Transmit
 436              	.LVL25:
 162:Core/Src/main.c ****         } else {
ARM GAS  /tmp/ccDBxmC8.s 			page 16


 437              		.loc 1 162 0
 438 013e 4FF0FF33 		mov	r3, #-1
 439 0142 0222     		movs	r2, #2
 440 0144 04F10E01 		add	r1, r4, #14
 441 0148 2846     		mov	r0, r5
 442 014a FFF7FEFF 		bl	HAL_UART_Transmit
 443              	.LVL26:
 444              	.LBE9:
 151:Core/Src/main.c ****             // Copy the new data
 445              		.loc 1 151 0
 446 014e B4E7     		b	.L19
 447              	.L25:
 448              		.align	2
 449              	.L24:
 450 0150 00000000 		.word	.LANCHOR0
 451 0154 00000000 		.word	incomingByte
 452 0158 00000000 		.word	incomingBytePrev
 453 015c 00000000 		.word	bufStartFrame
 454 0160 00000000 		.word	p
 455 0164 00000000 		.word	NewFeedback
 456 0168 00000000 		.word	.LC0
 457 016c 00000000 		.word	huart2
 458 0170 00000000 		.word	Feedback
 459              	.LBE8:
 460              		.cfi_endproc
 461              	.LFE132:
 463              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 464              		.align	1
 465              		.global	HAL_UART_RxCpltCallback
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	HAL_UART_RxCpltCallback:
 472              	.LFB130:
  96:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, "\r\nByte received ", sizeof("\r\nByte received "), HAL_MAX_DELAY); 
 473              		.loc 1 96 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              	.LVL27:
 478 0000 08B5     		push	{r3, lr}
 479              	.LCFI8:
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 3, -8
 482              		.cfi_offset 14, -4
  97:Core/Src/main.c ****     //HAL_UART_Transmit(&huart2, &incomingByte, sizeof(incomingByte), HAL_MAX_DELAY); // Blocking
 483              		.loc 1 97 0
 484 0002 4FF0FF33 		mov	r3, #-1
 485 0006 1122     		movs	r2, #17
 486 0008 0549     		ldr	r1, .L28
 487 000a 0648     		ldr	r0, .L28+4
 488              	.LVL28:
 489 000c FFF7FEFF 		bl	HAL_UART_Transmit
 490              	.LVL29:
 102:Core/Src/main.c **** 
 491              		.loc 1 102 0
ARM GAS  /tmp/ccDBxmC8.s 			page 17


 492 0010 FFF7FEFF 		bl	Receive
 493              	.LVL30:
 105:Core/Src/main.c **** }
 494              		.loc 1 105 0
 495 0014 0122     		movs	r2, #1
 496 0016 0449     		ldr	r1, .L28+8
 497 0018 0448     		ldr	r0, .L28+12
 498 001a FFF7FEFF 		bl	HAL_UART_Receive_DMA
 499              	.LVL31:
 500 001e 08BD     		pop	{r3, pc}
 501              	.L29:
 502              		.align	2
 503              	.L28:
 504 0020 00000000 		.word	.LC1
 505 0024 00000000 		.word	huart2
 506 0028 00000000 		.word	incomingByte
 507 002c 00000000 		.word	huart1
 508              		.cfi_endproc
 509              	.LFE130:
 511              		.section	.text.Error_Handler,"ax",%progbits
 512              		.align	1
 513              		.global	Error_Handler
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 517              		.fpu fpv4-sp-d16
 519              	Error_Handler:
 520              	.LFB139:
 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** /* USER CODE END 4 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c **** /**
 393:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 394:Core/Src/main.c ****   * @retval None
 395:Core/Src/main.c ****   */
 396:Core/Src/main.c **** void Error_Handler(void)
 397:Core/Src/main.c **** {
 521              		.loc 1 397 0
 522              		.cfi_startproc
 523              		@ Volatile: function does not return.
 524              		@ args = 0, pretend = 0, frame = 0
 525              		@ frame_needed = 0, uses_anonymous_args = 0
 526              		@ link register save eliminated.
 527              	.LBB10:
 528              	.LBB11:
 529              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccDBxmC8.s 			page 18


  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccDBxmC8.s 			page 19


  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDBxmC8.s 			page 20


 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 530              		.loc 2 142 0
 531              		.syntax unified
 532              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 533 0000 72B6     		cpsid i
 534              	@ 0 "" 2
 535              		.thumb
 536              		.syntax unified
 537              	.L31:
 538 0002 FEE7     		b	.L31
 539              	.LBE11:
 540              	.LBE10:
 541              		.cfi_endproc
 542              	.LFE139:
 544              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 545              		.align	1
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 549              		.fpu fpv4-sp-d16
 551              	MX_USART1_UART_Init:
 552              	.LFB135:
 283:Core/Src/main.c **** 
 553              		.loc 1 283 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557 0000 08B5     		push	{r3, lr}
 558              	.LCFI9:
 559              		.cfi_def_cfa_offset 8
 560              		.cfi_offset 3, -8
 561              		.cfi_offset 14, -4
 292:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 562              		.loc 1 292 0
 563 0002 0A48     		ldr	r0, .L36
 564 0004 0A4B     		ldr	r3, .L36+4
 565 0006 0360     		str	r3, [r0]
 293:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 566              		.loc 1 293 0
ARM GAS  /tmp/ccDBxmC8.s 			page 21


 567 0008 4FF4E133 		mov	r3, #115200
 568 000c 4360     		str	r3, [r0, #4]
 294:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 569              		.loc 1 294 0
 570 000e 0023     		movs	r3, #0
 571 0010 8360     		str	r3, [r0, #8]
 295:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 572              		.loc 1 295 0
 573 0012 C360     		str	r3, [r0, #12]
 296:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 574              		.loc 1 296 0
 575 0014 0361     		str	r3, [r0, #16]
 297:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 576              		.loc 1 297 0
 577 0016 0C22     		movs	r2, #12
 578 0018 4261     		str	r2, [r0, #20]
 298:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 579              		.loc 1 298 0
 580 001a 8361     		str	r3, [r0, #24]
 299:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 581              		.loc 1 299 0
 582 001c C361     		str	r3, [r0, #28]
 300:Core/Src/main.c ****   {
 583              		.loc 1 300 0
 584 001e FFF7FEFF 		bl	HAL_UART_Init
 585              	.LVL32:
 586 0022 00B9     		cbnz	r0, .L35
 587 0024 08BD     		pop	{r3, pc}
 588              	.L35:
 302:Core/Src/main.c ****   }
 589              		.loc 1 302 0
 590 0026 FFF7FEFF 		bl	Error_Handler
 591              	.LVL33:
 592              	.L37:
 593 002a 00BF     		.align	2
 594              	.L36:
 595 002c 00000000 		.word	huart1
 596 0030 00100140 		.word	1073811456
 597              		.cfi_endproc
 598              	.LFE135:
 600              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 601              		.align	1
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu fpv4-sp-d16
 607              	MX_USART2_UART_Init:
 608              	.LFB136:
 316:Core/Src/main.c **** 
 609              		.loc 1 316 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613 0000 08B5     		push	{r3, lr}
 614              	.LCFI10:
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 3, -8
ARM GAS  /tmp/ccDBxmC8.s 			page 22


 617              		.cfi_offset 14, -4
 325:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 618              		.loc 1 325 0
 619 0002 0A48     		ldr	r0, .L42
 620 0004 0A4B     		ldr	r3, .L42+4
 621 0006 0360     		str	r3, [r0]
 326:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 622              		.loc 1 326 0
 623 0008 4FF4E133 		mov	r3, #115200
 624 000c 4360     		str	r3, [r0, #4]
 327:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 625              		.loc 1 327 0
 626 000e 0023     		movs	r3, #0
 627 0010 8360     		str	r3, [r0, #8]
 328:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 628              		.loc 1 328 0
 629 0012 C360     		str	r3, [r0, #12]
 329:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 630              		.loc 1 329 0
 631 0014 0361     		str	r3, [r0, #16]
 330:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 632              		.loc 1 330 0
 633 0016 0C22     		movs	r2, #12
 634 0018 4261     		str	r2, [r0, #20]
 331:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 635              		.loc 1 331 0
 636 001a 8361     		str	r3, [r0, #24]
 332:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 637              		.loc 1 332 0
 638 001c C361     		str	r3, [r0, #28]
 333:Core/Src/main.c ****   {
 639              		.loc 1 333 0
 640 001e FFF7FEFF 		bl	HAL_UART_Init
 641              	.LVL34:
 642 0022 00B9     		cbnz	r0, .L41
 643 0024 08BD     		pop	{r3, pc}
 644              	.L41:
 335:Core/Src/main.c ****   }
 645              		.loc 1 335 0
 646 0026 FFF7FEFF 		bl	Error_Handler
 647              	.LVL35:
 648              	.L43:
 649 002a 00BF     		.align	2
 650              	.L42:
 651 002c 00000000 		.word	huart2
 652 0030 00440040 		.word	1073759232
 653              		.cfi_endproc
 654              	.LFE136:
 656              		.section	.text.SystemClock_Config,"ax",%progbits
 657              		.align	1
 658              		.global	SystemClock_Config
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu fpv4-sp-d16
 664              	SystemClock_Config:
 665              	.LFB134:
ARM GAS  /tmp/ccDBxmC8.s 			page 23


 238:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 666              		.loc 1 238 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 80
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670 0000 00B5     		push	{lr}
 671              	.LCFI11:
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 14, -4
 674 0002 95B0     		sub	sp, sp, #84
 675              	.LCFI12:
 676              		.cfi_def_cfa_offset 88
 239:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 677              		.loc 1 239 0
 678 0004 3022     		movs	r2, #48
 679 0006 0021     		movs	r1, #0
 680 0008 08A8     		add	r0, sp, #32
 681 000a FFF7FEFF 		bl	memset
 682              	.LVL36:
 240:Core/Src/main.c **** 
 683              		.loc 1 240 0
 684 000e 0023     		movs	r3, #0
 685 0010 0393     		str	r3, [sp, #12]
 686 0012 0493     		str	r3, [sp, #16]
 687 0014 0593     		str	r3, [sp, #20]
 688 0016 0693     		str	r3, [sp, #24]
 689 0018 0793     		str	r3, [sp, #28]
 690              	.LBB12:
 244:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 691              		.loc 1 244 0
 692 001a 0193     		str	r3, [sp, #4]
 693 001c 1F4A     		ldr	r2, .L50
 694 001e 116C     		ldr	r1, [r2, #64]
 695 0020 41F08051 		orr	r1, r1, #268435456
 696 0024 1164     		str	r1, [r2, #64]
 697 0026 126C     		ldr	r2, [r2, #64]
 698 0028 02F08052 		and	r2, r2, #268435456
 699 002c 0192     		str	r2, [sp, #4]
 700 002e 019A     		ldr	r2, [sp, #4]
 701              	.LBE12:
 702              	.LBB13:
 245:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 703              		.loc 1 245 0
 704 0030 0293     		str	r3, [sp, #8]
 705 0032 1B4A     		ldr	r2, .L50+4
 706 0034 1168     		ldr	r1, [r2]
 707 0036 41F48041 		orr	r1, r1, #16384
 708 003a 1160     		str	r1, [r2]
 709 003c 1268     		ldr	r2, [r2]
 710 003e 02F48042 		and	r2, r2, #16384
 711 0042 0292     		str	r2, [sp, #8]
 712 0044 029A     		ldr	r2, [sp, #8]
 713              	.LBE13:
 249:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 714              		.loc 1 249 0
 715 0046 0222     		movs	r2, #2
 716 0048 0892     		str	r2, [sp, #32]
ARM GAS  /tmp/ccDBxmC8.s 			page 24


 250:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 717              		.loc 1 250 0
 718 004a 0121     		movs	r1, #1
 719 004c 0B91     		str	r1, [sp, #44]
 251:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 720              		.loc 1 251 0
 721 004e 1021     		movs	r1, #16
 722 0050 0C91     		str	r1, [sp, #48]
 252:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 723              		.loc 1 252 0
 724 0052 0E92     		str	r2, [sp, #56]
 253:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 725              		.loc 1 253 0
 726 0054 0F93     		str	r3, [sp, #60]
 254:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 727              		.loc 1 254 0
 728 0056 0823     		movs	r3, #8
 729 0058 1093     		str	r3, [sp, #64]
 255:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 730              		.loc 1 255 0
 731 005a A823     		movs	r3, #168
 732 005c 1193     		str	r3, [sp, #68]
 256:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 733              		.loc 1 256 0
 734 005e 1292     		str	r2, [sp, #72]
 257:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 735              		.loc 1 257 0
 736 0060 0423     		movs	r3, #4
 737 0062 1393     		str	r3, [sp, #76]
 258:Core/Src/main.c ****   {
 738              		.loc 1 258 0
 739 0064 08A8     		add	r0, sp, #32
 740 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 741              	.LVL37:
 742 006a 98B9     		cbnz	r0, .L48
 264:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 743              		.loc 1 264 0
 744 006c 0F23     		movs	r3, #15
 745 006e 0393     		str	r3, [sp, #12]
 266:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 746              		.loc 1 266 0
 747 0070 0223     		movs	r3, #2
 748 0072 0493     		str	r3, [sp, #16]
 267:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 749              		.loc 1 267 0
 750 0074 0023     		movs	r3, #0
 751 0076 0593     		str	r3, [sp, #20]
 268:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 752              		.loc 1 268 0
 753 0078 4FF4A053 		mov	r3, #5120
 754 007c 0693     		str	r3, [sp, #24]
 269:Core/Src/main.c **** 
 755              		.loc 1 269 0
 756 007e 4FF48053 		mov	r3, #4096
 757 0082 0793     		str	r3, [sp, #28]
 271:Core/Src/main.c ****   {
 758              		.loc 1 271 0
ARM GAS  /tmp/ccDBxmC8.s 			page 25


 759 0084 0521     		movs	r1, #5
 760 0086 03A8     		add	r0, sp, #12
 761 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 762              	.LVL38:
 763 008c 20B9     		cbnz	r0, .L49
 275:Core/Src/main.c **** 
 764              		.loc 1 275 0
 765 008e 15B0     		add	sp, sp, #84
 766              	.LCFI13:
 767              		.cfi_remember_state
 768              		.cfi_def_cfa_offset 4
 769              		@ sp needed
 770 0090 5DF804FB 		ldr	pc, [sp], #4
 771              	.L48:
 772              	.LCFI14:
 773              		.cfi_restore_state
 260:Core/Src/main.c ****   }
 774              		.loc 1 260 0
 775 0094 FFF7FEFF 		bl	Error_Handler
 776              	.LVL39:
 777              	.L49:
 273:Core/Src/main.c ****   }
 778              		.loc 1 273 0
 779 0098 FFF7FEFF 		bl	Error_Handler
 780              	.LVL40:
 781              	.L51:
 782              		.align	2
 783              	.L50:
 784 009c 00380240 		.word	1073887232
 785 00a0 00700040 		.word	1073770496
 786              		.cfi_endproc
 787              	.LFE134:
 789              		.section	.text.main,"ax",%progbits
 790              		.align	1
 791              		.global	main
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv4-sp-d16
 797              	main:
 798              	.LFB133:
 179:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 799              		.loc 1 179 0
 800              		.cfi_startproc
 801              		@ Volatile: function does not return.
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804 0000 08B5     		push	{r3, lr}
 805              	.LCFI15:
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 3, -8
 808              		.cfi_offset 14, -4
 187:Core/Src/main.c **** 
 809              		.loc 1 187 0
 810 0002 FFF7FEFF 		bl	HAL_Init
 811              	.LVL41:
 194:Core/Src/main.c **** 
ARM GAS  /tmp/ccDBxmC8.s 			page 26


 812              		.loc 1 194 0
 813 0006 FFF7FEFF 		bl	SystemClock_Config
 814              	.LVL42:
 201:Core/Src/main.c ****   MX_DMA_Init();
 815              		.loc 1 201 0
 816 000a FFF7FEFF 		bl	MX_GPIO_Init
 817              	.LVL43:
 202:Core/Src/main.c ****   MX_USART1_UART_Init();
 818              		.loc 1 202 0
 819 000e FFF7FEFF 		bl	MX_DMA_Init
 820              	.LVL44:
 203:Core/Src/main.c ****   MX_USART2_UART_Init();
 821              		.loc 1 203 0
 822 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 823              	.LVL45:
 204:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 824              		.loc 1 204 0
 825 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 826              	.LVL46:
 214:Core/Src/main.c **** 
 827              		.loc 1 214 0
 828 001a 0122     		movs	r2, #1
 829 001c 0B49     		ldr	r1, .L55
 830 001e 0C48     		ldr	r0, .L55+4
 831 0020 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 832              	.LVL47:
 216:Core/Src/main.c **** 
 833              		.loc 1 216 0
 834 0024 4FF0FF33 		mov	r3, #-1
 835 0028 1122     		movs	r2, #17
 836 002a 0A49     		ldr	r1, .L55+8
 837 002c 0A48     		ldr	r0, .L55+12
 838 002e FFF7FEFF 		bl	HAL_UART_Transmit
 839              	.LVL48:
 840              	.L53:
 221:Core/Src/main.c ****     HAL_Delay(50);
 841              		.loc 1 221 0 discriminator 1
 842 0032 4FF40051 		mov	r1, #8192
 843 0036 0948     		ldr	r0, .L55+16
 844 0038 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 845              	.LVL49:
 222:Core/Src/main.c **** 
 846              		.loc 1 222 0 discriminator 1
 847 003c 3220     		movs	r0, #50
 848 003e FFF7FEFF 		bl	HAL_Delay
 849              	.LVL50:
 224:Core/Src/main.c **** 
 850              		.loc 1 224 0 discriminator 1
 851 0042 0121     		movs	r1, #1
 852 0044 0020     		movs	r0, #0
 853 0046 FFF7FEFF 		bl	Send
 854              	.LVL51:
 855 004a F2E7     		b	.L53
 856              	.L56:
 857              		.align	2
 858              	.L55:
 859 004c 00000000 		.word	incomingByte
ARM GAS  /tmp/ccDBxmC8.s 			page 27


 860 0050 00000000 		.word	huart1
 861 0054 00000000 		.word	.LC2
 862 0058 00000000 		.word	huart2
 863 005c 00080240 		.word	1073874944
 864              		.cfi_endproc
 865              	.LFE133:
 867              		.comm	NewFeedback,18,4
 868              		.comm	Feedback,18,4
 869              		.comm	Command,8,4
 870              		.comm	incomingBytePrev,1,1
 871              		.comm	incomingByte,1,1
 872              		.comm	p,4,4
 873              		.comm	bufStartFrame,2,2
 874              		.global	idx
 875              		.comm	hdma_usart1_tx,96,4
 876              		.comm	hdma_usart1_rx,96,4
 877              		.comm	huart2,68,4
 878              		.comm	huart1,68,4
 879              		.section	.bss.idx,"aw",%nobits
 880              		.set	.LANCHOR0,. + 0
 883              	idx:
 884 0000 00       		.space	1
 885              		.section	.rodata.HAL_UART_RxCpltCallback.str1.4,"aMS",%progbits,1
 886              		.align	2
 887              	.LC1:
 888 0000 0D0A4279 		.ascii	"\015\012Byte received \000"
 888      74652072 
 888      65636569 
 888      76656420 
 888      00
 889              		.section	.rodata.Receive.str1.4,"aMS",%progbits,1
 890              		.align	2
 891              	.LC0:
 892 0000 4E6F6E2D 		.ascii	"Non-valid data skipped\000"
 892      76616C69 
 892      64206461 
 892      74612073 
 892      6B697070 
 893              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 894              		.align	2
 895              	.LC2:
 896 0000 52656365 		.ascii	"Receiving Data\015\012\000"
 896      6976696E 
 896      67204461 
 896      74610D0A 
 896      00
 897              		.text
 898              	.Letext0:
 899              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 900              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 901              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 902              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 903              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 904              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 905              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 906              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 907              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /tmp/ccDBxmC8.s 			page 28


 908              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 909              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 910              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 911              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 912              		.file 16 "<built-in>"
ARM GAS  /tmp/ccDBxmC8.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccDBxmC8.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccDBxmC8.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccDBxmC8.s:112    .text.MX_GPIO_Init:0000000000000078 $d
     /tmp/ccDBxmC8.s:118    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccDBxmC8.s:124    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccDBxmC8.s:180    .text.MX_DMA_Init:0000000000000040 $d
     /tmp/ccDBxmC8.s:185    .text.Send:0000000000000000 $t
     /tmp/ccDBxmC8.s:192    .text.Send:0000000000000000 Send
     /tmp/ccDBxmC8.s:230    .text.Send:0000000000000028 $d
                            *COM*:0000000000000008 Command
                            *COM*:0000000000000044 huart1
     /tmp/ccDBxmC8.s:236    .text.Receive:0000000000000000 $t
     /tmp/ccDBxmC8.s:243    .text.Receive:0000000000000000 Receive
     /tmp/ccDBxmC8.s:450    .text.Receive:0000000000000150 $d
                            *COM*:0000000000000001 incomingByte
                            *COM*:0000000000000001 incomingBytePrev
                            *COM*:0000000000000002 bufStartFrame
                            *COM*:0000000000000004 p
                            *COM*:0000000000000012 NewFeedback
                            *COM*:0000000000000044 huart2
                            *COM*:0000000000000012 Feedback
     /tmp/ccDBxmC8.s:464    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccDBxmC8.s:471    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccDBxmC8.s:504    .text.HAL_UART_RxCpltCallback:0000000000000020 $d
     /tmp/ccDBxmC8.s:512    .text.Error_Handler:0000000000000000 $t
     /tmp/ccDBxmC8.s:519    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccDBxmC8.s:545    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccDBxmC8.s:551    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccDBxmC8.s:595    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccDBxmC8.s:601    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccDBxmC8.s:607    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccDBxmC8.s:651    .text.MX_USART2_UART_Init:000000000000002c $d
     /tmp/ccDBxmC8.s:657    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccDBxmC8.s:664    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccDBxmC8.s:784    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccDBxmC8.s:790    .text.main:0000000000000000 $t
     /tmp/ccDBxmC8.s:797    .text.main:0000000000000000 main
     /tmp/ccDBxmC8.s:859    .text.main:000000000000004c $d
     /tmp/ccDBxmC8.s:883    .bss.idx:0000000000000000 idx
                            *COM*:0000000000000060 hdma_usart1_tx
                            *COM*:0000000000000060 hdma_usart1_rx
     /tmp/ccDBxmC8.s:884    .bss.idx:0000000000000000 $d
     /tmp/ccDBxmC8.s:886    .rodata.HAL_UART_RxCpltCallback.str1.4:0000000000000000 $d
     /tmp/ccDBxmC8.s:890    .rodata.Receive.str1.4:0000000000000000 $d
     /tmp/ccDBxmC8.s:894    .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
HAL_UART_Receive_DMA
HAL_UART_Init
ARM GAS  /tmp/ccDBxmC8.s 			page 30


memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_TogglePin
HAL_Delay
