ARM GAS  /tmp/ccdcmlMW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB135:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include <string.h>
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  /tmp/ccdcmlMW.s 			page 2


  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** #define DATA_SIZE  12
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** UART_HandleTypeDef huart2;
  46:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_rx;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** char buffRX[DATA_SIZE] = {0};
  49:Core/Src/main.c **** char buffTX[] = "Hello World\r\n";
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** static void MX_GPIO_Init(void);
  58:Core/Src/main.c **** static void MX_DMA_Init(void);
  59:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  67:Core/Src/main.c **** {
  68:Core/Src/main.c ****     // Send whatever we received to the same UART peripheral
  69:Core/Src/main.c ****     HAL_UART_Transmit(huart, buffRX, sizeof(buffRX), HAL_MAX_DELAY);
  70:Core/Src/main.c **** 
  71:Core/Src/main.c ****     // Tell DMA to receive more data in the same UART
  72:Core/Src/main.c ****     HAL_UART_Receive_DMA(huart, buffRX, DATA_SIZE);
  73:Core/Src/main.c **** }
  74:Core/Src/main.c **** /* USER CODE END 0 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /**
  77:Core/Src/main.c ****   * @brief  The application entry point.
  78:Core/Src/main.c ****   * @retval int
  79:Core/Src/main.c ****   */
  80:Core/Src/main.c **** int main(void)
  81:Core/Src/main.c **** {
  82:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* USER CODE END 1 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  89:Core/Src/main.c ****   HAL_Init();
ARM GAS  /tmp/ccdcmlMW.s 			page 3


  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END Init */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* Configure the system clock */
  96:Core/Src/main.c ****   SystemClock_Config();
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END SysInit */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* Initialize all configured peripherals */
 103:Core/Src/main.c ****   MX_GPIO_Init();
 104:Core/Src/main.c ****   MX_DMA_Init();
 105:Core/Src/main.c ****   MX_USART2_UART_Init();
 106:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END 2 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Infinite loop */
 111:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 112:Core/Src/main.c ****   
 113:Core/Src/main.c ****   // Receive data from UART (DATA_SIZE bytes) and store in buffer.
 114:Core/Src/main.c ****   // HAL_UART_RxCpltCallback will be called when DATA_SIZE bytes have been received.
 115:Core/Src/main.c ****   HAL_UART_Receive_DMA (&huart2, buffRX, DATA_SIZE);
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   while (1)
 118:Core/Src/main.c ****   {
 119:Core/Src/main.c ****     // Blinking LED
 120:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 121:Core/Src/main.c ****     HAL_Delay(1000);
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****     /*
 124:Core/Src/main.c ****     TODO : Transmit DMA does not work as expected. It only send one byte of data and then stops.
 125:Core/Src/main.c ****     Does circular mode solve it?
 126:Core/Src/main.c ****     */
 127:Core/Src/main.c ****     //HAL_UART_Transmit_DMA(&huart2, buffTX, sizeof(buffTX)); //Non-blocking mode with DMA
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, buffTX, sizeof(buffTX), HAL_MAX_DELAY); // Blocking
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****     /* USER CODE END WHILE */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 134:Core/Src/main.c ****   }
 135:Core/Src/main.c ****   /* USER CODE END 3 */
 136:Core/Src/main.c **** }
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** /**
 139:Core/Src/main.c ****   * @brief System Clock Configuration
 140:Core/Src/main.c ****   * @retval None
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c **** void SystemClock_Config(void)
 143:Core/Src/main.c **** {
 144:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 145:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 146:Core/Src/main.c **** 
ARM GAS  /tmp/ccdcmlMW.s 			page 4


 147:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 148:Core/Src/main.c ****   */
 149:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 150:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 151:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 152:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 153:Core/Src/main.c ****   */
 154:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 155:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 156:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 161:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 162:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 163:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 164:Core/Src/main.c ****   {
 165:Core/Src/main.c ****     Error_Handler();
 166:Core/Src/main.c ****   }
 167:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 168:Core/Src/main.c ****   */
 169:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 170:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 171:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 172:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 173:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 174:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 177:Core/Src/main.c ****   {
 178:Core/Src/main.c ****     Error_Handler();
 179:Core/Src/main.c ****   }
 180:Core/Src/main.c **** }
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** /**
 183:Core/Src/main.c ****   * @brief USART2 Initialization Function
 184:Core/Src/main.c ****   * @param None
 185:Core/Src/main.c ****   * @retval None
 186:Core/Src/main.c ****   */
 187:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 188:Core/Src/main.c **** {
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 197:Core/Src/main.c ****   huart2.Instance = USART2;
 198:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 199:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 200:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 201:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 202:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 203:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
ARM GAS  /tmp/ccdcmlMW.s 			page 5


 204:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 205:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 206:Core/Src/main.c ****   {
 207:Core/Src/main.c ****     Error_Handler();
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** }
 214:Core/Src/main.c **** 
 215:Core/Src/main.c **** /**
 216:Core/Src/main.c ****   * Enable DMA controller clock
 217:Core/Src/main.c ****   */
 218:Core/Src/main.c **** static void MX_DMA_Init(void)
 219:Core/Src/main.c **** {
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* DMA controller clock enable */
 222:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****   /* DMA interrupt init */
 225:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 226:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 227:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 228:Core/Src/main.c **** 
 229:Core/Src/main.c **** }
 230:Core/Src/main.c **** 
 231:Core/Src/main.c **** /**
 232:Core/Src/main.c ****   * @brief GPIO Initialization Function
 233:Core/Src/main.c ****   * @param None
 234:Core/Src/main.c ****   * @retval None
 235:Core/Src/main.c ****   */
 236:Core/Src/main.c **** static void MX_GPIO_Init(void)
 237:Core/Src/main.c **** {
  27              		.loc 1 237 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 32
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 48
 238:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 238 0
  41 0004 0024     		movs	r4, #0
  42 0006 0394     		str	r4, [sp, #12]
  43 0008 0494     		str	r4, [sp, #16]
  44 000a 0594     		str	r4, [sp, #20]
  45 000c 0694     		str	r4, [sp, #24]
  46 000e 0794     		str	r4, [sp, #28]
  47              	.LBB4:
 239:Core/Src/main.c **** 
ARM GAS  /tmp/ccdcmlMW.s 			page 6


 240:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 241:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 241 0
  49 0010 0194     		str	r4, [sp, #4]
  50 0012 144B     		ldr	r3, .L3
  51 0014 1A6B     		ldr	r2, [r3, #48]
  52 0016 42F00402 		orr	r2, r2, #4
  53 001a 1A63     		str	r2, [r3, #48]
  54 001c 1A6B     		ldr	r2, [r3, #48]
  55 001e 02F00402 		and	r2, r2, #4
  56 0022 0192     		str	r2, [sp, #4]
  57 0024 019A     		ldr	r2, [sp, #4]
  58              	.LBE4:
  59              	.LBB5:
 242:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  60              		.loc 1 242 0
  61 0026 0294     		str	r4, [sp, #8]
  62 0028 1A6B     		ldr	r2, [r3, #48]
  63 002a 42F00802 		orr	r2, r2, #8
  64 002e 1A63     		str	r2, [r3, #48]
  65 0030 1B6B     		ldr	r3, [r3, #48]
  66 0032 03F00803 		and	r3, r3, #8
  67 0036 0293     		str	r3, [sp, #8]
  68 0038 029B     		ldr	r3, [sp, #8]
  69              	.LBE5:
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 245:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
  70              		.loc 1 245 0
  71 003a 0B4D     		ldr	r5, .L3+4
  72 003c 2246     		mov	r2, r4
  73 003e 4FF40051 		mov	r1, #8192
  74 0042 2846     		mov	r0, r5
  75 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
  76              	.LVL0:
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /*Configure GPIO pin : PC13 */
 248:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_13;
  77              		.loc 1 248 0
  78 0048 4FF40053 		mov	r3, #8192
  79 004c 0393     		str	r3, [sp, #12]
 249:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  80              		.loc 1 249 0
  81 004e 0123     		movs	r3, #1
  82 0050 0493     		str	r3, [sp, #16]
 250:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  83              		.loc 1 250 0
  84 0052 0594     		str	r4, [sp, #20]
 251:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  85              		.loc 1 251 0
  86 0054 0694     		str	r4, [sp, #24]
 252:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  87              		.loc 1 252 0
  88 0056 03A9     		add	r1, sp, #12
  89 0058 2846     		mov	r0, r5
  90 005a FFF7FEFF 		bl	HAL_GPIO_Init
  91              	.LVL1:
ARM GAS  /tmp/ccdcmlMW.s 			page 7


 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** }
  92              		.loc 1 254 0
  93 005e 09B0     		add	sp, sp, #36
  94              	.LCFI2:
  95              		.cfi_def_cfa_offset 12
  96              		@ sp needed
  97 0060 30BD     		pop	{r4, r5, pc}
  98              	.L4:
  99 0062 00BF     		.align	2
 100              	.L3:
 101 0064 00380240 		.word	1073887232
 102 0068 00080240 		.word	1073874944
 103              		.cfi_endproc
 104              	.LFE135:
 106              		.section	.text.MX_DMA_Init,"ax",%progbits
 107              		.align	1
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu fpv4-sp-d16
 113              	MX_DMA_Init:
 114              	.LFB134:
 219:Core/Src/main.c **** 
 115              		.loc 1 219 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119 0000 00B5     		push	{lr}
 120              	.LCFI3:
 121              		.cfi_def_cfa_offset 4
 122              		.cfi_offset 14, -4
 123 0002 83B0     		sub	sp, sp, #12
 124              	.LCFI4:
 125              		.cfi_def_cfa_offset 16
 126              	.LBB6:
 222:Core/Src/main.c **** 
 127              		.loc 1 222 0
 128 0004 0021     		movs	r1, #0
 129 0006 0191     		str	r1, [sp, #4]
 130 0008 094B     		ldr	r3, .L7
 131 000a 1A6B     		ldr	r2, [r3, #48]
 132 000c 42F40012 		orr	r2, r2, #2097152
 133 0010 1A63     		str	r2, [r3, #48]
 134 0012 1B6B     		ldr	r3, [r3, #48]
 135 0014 03F40013 		and	r3, r3, #2097152
 136 0018 0193     		str	r3, [sp, #4]
 137 001a 019B     		ldr	r3, [sp, #4]
 138              	.LBE6:
 226:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 139              		.loc 1 226 0
 140 001c 0A46     		mov	r2, r1
 141 001e 1020     		movs	r0, #16
 142 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 143              	.LVL2:
 227:Core/Src/main.c **** 
 144              		.loc 1 227 0
ARM GAS  /tmp/ccdcmlMW.s 			page 8


 145 0024 1020     		movs	r0, #16
 146 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 147              	.LVL3:
 229:Core/Src/main.c **** 
 148              		.loc 1 229 0
 149 002a 03B0     		add	sp, sp, #12
 150              	.LCFI5:
 151              		.cfi_def_cfa_offset 4
 152              		@ sp needed
 153 002c 5DF804FB 		ldr	pc, [sp], #4
 154              	.L8:
 155              		.align	2
 156              	.L7:
 157 0030 00380240 		.word	1073887232
 158              		.cfi_endproc
 159              	.LFE134:
 161              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 162              		.align	1
 163              		.global	HAL_UART_RxCpltCallback
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	HAL_UART_RxCpltCallback:
 170              	.LFB130:
  67:Core/Src/main.c ****     // Send whatever we received to the same UART peripheral
 171              		.loc 1 67 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              	.LVL4:
 176 0000 38B5     		push	{r3, r4, r5, lr}
 177              	.LCFI6:
 178              		.cfi_def_cfa_offset 16
 179              		.cfi_offset 3, -16
 180              		.cfi_offset 4, -12
 181              		.cfi_offset 5, -8
 182              		.cfi_offset 14, -4
 183 0002 0546     		mov	r5, r0
  69:Core/Src/main.c **** 
 184              		.loc 1 69 0
 185 0004 064C     		ldr	r4, .L11
 186 0006 4FF0FF33 		mov	r3, #-1
 187 000a 0C22     		movs	r2, #12
 188 000c 2146     		mov	r1, r4
 189 000e FFF7FEFF 		bl	HAL_UART_Transmit
 190              	.LVL5:
  72:Core/Src/main.c **** }
 191              		.loc 1 72 0
 192 0012 0C22     		movs	r2, #12
 193 0014 2146     		mov	r1, r4
 194 0016 2846     		mov	r0, r5
 195 0018 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 196              	.LVL6:
 197 001c 38BD     		pop	{r3, r4, r5, pc}
 198              	.LVL7:
 199              	.L12:
ARM GAS  /tmp/ccdcmlMW.s 			page 9


 200 001e 00BF     		.align	2
 201              	.L11:
 202 0020 00000000 		.word	.LANCHOR0
 203              		.cfi_endproc
 204              	.LFE130:
 206              		.section	.text.Error_Handler,"ax",%progbits
 207              		.align	1
 208              		.global	Error_Handler
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu fpv4-sp-d16
 214              	Error_Handler:
 215              	.LFB136:
 255:Core/Src/main.c **** 
 256:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** /* USER CODE END 4 */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** /**
 261:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 262:Core/Src/main.c ****   * @retval None
 263:Core/Src/main.c ****   */
 264:Core/Src/main.c **** void Error_Handler(void)
 265:Core/Src/main.c **** {
 216              		.loc 1 265 0
 217              		.cfi_startproc
 218              		@ Volatile: function does not return.
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 222              	.LBB7:
 223              	.LBB8:
 224              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccdcmlMW.s 			page 10


  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccdcmlMW.s 			page 11


  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
ARM GAS  /tmp/ccdcmlMW.s 			page 12


 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 225              		.loc 2 142 0
 226              		.syntax unified
 227              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 228 0000 72B6     		cpsid i
 229              	@ 0 "" 2
 230              		.thumb
 231              		.syntax unified
 232              	.L14:
 233 0002 FEE7     		b	.L14
 234              	.LBE8:
 235              	.LBE7:
 236              		.cfi_endproc
 237              	.LFE136:
 239              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 240              		.align	1
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 244              		.fpu fpv4-sp-d16
 246              	MX_USART2_UART_Init:
 247              	.LFB133:
 188:Core/Src/main.c **** 
 248              		.loc 1 188 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252 0000 08B5     		push	{r3, lr}
 253              	.LCFI7:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 3, -8
 256              		.cfi_offset 14, -4
 197:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 257              		.loc 1 197 0
 258 0002 0A48     		ldr	r0, .L19
 259 0004 0A4B     		ldr	r3, .L19+4
 260 0006 0360     		str	r3, [r0]
 198:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 261              		.loc 1 198 0
 262 0008 4FF4E133 		mov	r3, #115200
 263 000c 4360     		str	r3, [r0, #4]
 199:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 264              		.loc 1 199 0
 265 000e 0023     		movs	r3, #0
 266 0010 8360     		str	r3, [r0, #8]
 200:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 267              		.loc 1 200 0
 268 0012 C360     		str	r3, [r0, #12]
 201:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 269              		.loc 1 201 0
 270 0014 0361     		str	r3, [r0, #16]
 202:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 271              		.loc 1 202 0
ARM GAS  /tmp/ccdcmlMW.s 			page 13


 272 0016 0C22     		movs	r2, #12
 273 0018 4261     		str	r2, [r0, #20]
 203:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 274              		.loc 1 203 0
 275 001a 8361     		str	r3, [r0, #24]
 204:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 276              		.loc 1 204 0
 277 001c C361     		str	r3, [r0, #28]
 205:Core/Src/main.c ****   {
 278              		.loc 1 205 0
 279 001e FFF7FEFF 		bl	HAL_UART_Init
 280              	.LVL8:
 281 0022 00B9     		cbnz	r0, .L18
 282 0024 08BD     		pop	{r3, pc}
 283              	.L18:
 207:Core/Src/main.c ****   }
 284              		.loc 1 207 0
 285 0026 FFF7FEFF 		bl	Error_Handler
 286              	.LVL9:
 287              	.L20:
 288 002a 00BF     		.align	2
 289              	.L19:
 290 002c 00000000 		.word	huart2
 291 0030 00440040 		.word	1073759232
 292              		.cfi_endproc
 293              	.LFE133:
 295              		.section	.text.SystemClock_Config,"ax",%progbits
 296              		.align	1
 297              		.global	SystemClock_Config
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu fpv4-sp-d16
 303              	SystemClock_Config:
 304              	.LFB132:
 143:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 305              		.loc 1 143 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 80
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309 0000 00B5     		push	{lr}
 310              	.LCFI8:
 311              		.cfi_def_cfa_offset 4
 312              		.cfi_offset 14, -4
 313 0002 95B0     		sub	sp, sp, #84
 314              	.LCFI9:
 315              		.cfi_def_cfa_offset 88
 144:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 316              		.loc 1 144 0
 317 0004 3022     		movs	r2, #48
 318 0006 0021     		movs	r1, #0
 319 0008 08A8     		add	r0, sp, #32
 320 000a FFF7FEFF 		bl	memset
 321              	.LVL10:
 145:Core/Src/main.c **** 
 322              		.loc 1 145 0
 323 000e 0023     		movs	r3, #0
ARM GAS  /tmp/ccdcmlMW.s 			page 14


 324 0010 0393     		str	r3, [sp, #12]
 325 0012 0493     		str	r3, [sp, #16]
 326 0014 0593     		str	r3, [sp, #20]
 327 0016 0693     		str	r3, [sp, #24]
 328 0018 0793     		str	r3, [sp, #28]
 329              	.LBB9:
 149:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 330              		.loc 1 149 0
 331 001a 0193     		str	r3, [sp, #4]
 332 001c 1F4A     		ldr	r2, .L27
 333 001e 116C     		ldr	r1, [r2, #64]
 334 0020 41F08051 		orr	r1, r1, #268435456
 335 0024 1164     		str	r1, [r2, #64]
 336 0026 126C     		ldr	r2, [r2, #64]
 337 0028 02F08052 		and	r2, r2, #268435456
 338 002c 0192     		str	r2, [sp, #4]
 339 002e 019A     		ldr	r2, [sp, #4]
 340              	.LBE9:
 341              	.LBB10:
 150:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 342              		.loc 1 150 0
 343 0030 0293     		str	r3, [sp, #8]
 344 0032 1B4A     		ldr	r2, .L27+4
 345 0034 1168     		ldr	r1, [r2]
 346 0036 41F48041 		orr	r1, r1, #16384
 347 003a 1160     		str	r1, [r2]
 348 003c 1268     		ldr	r2, [r2]
 349 003e 02F48042 		and	r2, r2, #16384
 350 0042 0292     		str	r2, [sp, #8]
 351 0044 029A     		ldr	r2, [sp, #8]
 352              	.LBE10:
 154:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 353              		.loc 1 154 0
 354 0046 0222     		movs	r2, #2
 355 0048 0892     		str	r2, [sp, #32]
 155:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 356              		.loc 1 155 0
 357 004a 0121     		movs	r1, #1
 358 004c 0B91     		str	r1, [sp, #44]
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 359              		.loc 1 156 0
 360 004e 1021     		movs	r1, #16
 361 0050 0C91     		str	r1, [sp, #48]
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 362              		.loc 1 157 0
 363 0052 0E92     		str	r2, [sp, #56]
 158:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 364              		.loc 1 158 0
 365 0054 0F93     		str	r3, [sp, #60]
 159:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 366              		.loc 1 159 0
 367 0056 0823     		movs	r3, #8
 368 0058 1093     		str	r3, [sp, #64]
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 369              		.loc 1 160 0
 370 005a A823     		movs	r3, #168
 371 005c 1193     		str	r3, [sp, #68]
ARM GAS  /tmp/ccdcmlMW.s 			page 15


 161:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 372              		.loc 1 161 0
 373 005e 1292     		str	r2, [sp, #72]
 162:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 374              		.loc 1 162 0
 375 0060 0423     		movs	r3, #4
 376 0062 1393     		str	r3, [sp, #76]
 163:Core/Src/main.c ****   {
 377              		.loc 1 163 0
 378 0064 08A8     		add	r0, sp, #32
 379 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 380              	.LVL11:
 381 006a 98B9     		cbnz	r0, .L25
 169:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 382              		.loc 1 169 0
 383 006c 0F23     		movs	r3, #15
 384 006e 0393     		str	r3, [sp, #12]
 171:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 385              		.loc 1 171 0
 386 0070 0223     		movs	r3, #2
 387 0072 0493     		str	r3, [sp, #16]
 172:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 388              		.loc 1 172 0
 389 0074 0023     		movs	r3, #0
 390 0076 0593     		str	r3, [sp, #20]
 173:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 391              		.loc 1 173 0
 392 0078 4FF4A053 		mov	r3, #5120
 393 007c 0693     		str	r3, [sp, #24]
 174:Core/Src/main.c **** 
 394              		.loc 1 174 0
 395 007e 4FF48053 		mov	r3, #4096
 396 0082 0793     		str	r3, [sp, #28]
 176:Core/Src/main.c ****   {
 397              		.loc 1 176 0
 398 0084 0521     		movs	r1, #5
 399 0086 03A8     		add	r0, sp, #12
 400 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 401              	.LVL12:
 402 008c 20B9     		cbnz	r0, .L26
 180:Core/Src/main.c **** 
 403              		.loc 1 180 0
 404 008e 15B0     		add	sp, sp, #84
 405              	.LCFI10:
 406              		.cfi_remember_state
 407              		.cfi_def_cfa_offset 4
 408              		@ sp needed
 409 0090 5DF804FB 		ldr	pc, [sp], #4
 410              	.L25:
 411              	.LCFI11:
 412              		.cfi_restore_state
 165:Core/Src/main.c ****   }
 413              		.loc 1 165 0
 414 0094 FFF7FEFF 		bl	Error_Handler
 415              	.LVL13:
 416              	.L26:
 178:Core/Src/main.c ****   }
ARM GAS  /tmp/ccdcmlMW.s 			page 16


 417              		.loc 1 178 0
 418 0098 FFF7FEFF 		bl	Error_Handler
 419              	.LVL14:
 420              	.L28:
 421              		.align	2
 422              	.L27:
 423 009c 00380240 		.word	1073887232
 424 00a0 00700040 		.word	1073770496
 425              		.cfi_endproc
 426              	.LFE132:
 428              		.section	.text.main,"ax",%progbits
 429              		.align	1
 430              		.global	main
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 434              		.fpu fpv4-sp-d16
 436              	main:
 437              	.LFB131:
  81:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 438              		.loc 1 81 0
 439              		.cfi_startproc
 440              		@ Volatile: function does not return.
 441              		@ args = 0, pretend = 0, frame = 0
 442              		@ frame_needed = 0, uses_anonymous_args = 0
 443 0000 08B5     		push	{r3, lr}
 444              	.LCFI12:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 3, -8
 447              		.cfi_offset 14, -4
  89:Core/Src/main.c **** 
 448              		.loc 1 89 0
 449 0002 FFF7FEFF 		bl	HAL_Init
 450              	.LVL15:
  96:Core/Src/main.c **** 
 451              		.loc 1 96 0
 452 0006 FFF7FEFF 		bl	SystemClock_Config
 453              	.LVL16:
 103:Core/Src/main.c ****   MX_DMA_Init();
 454              		.loc 1 103 0
 455 000a FFF7FEFF 		bl	MX_GPIO_Init
 456              	.LVL17:
 104:Core/Src/main.c ****   MX_USART2_UART_Init();
 457              		.loc 1 104 0
 458 000e FFF7FEFF 		bl	MX_DMA_Init
 459              	.LVL18:
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 460              		.loc 1 105 0
 461 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 462              	.LVL19:
 115:Core/Src/main.c **** 
 463              		.loc 1 115 0
 464 0016 0C22     		movs	r2, #12
 465 0018 0A49     		ldr	r1, .L32
 466 001a 0B48     		ldr	r0, .L32+4
 467 001c FFF7FEFF 		bl	HAL_UART_Receive_DMA
 468              	.LVL20:
ARM GAS  /tmp/ccdcmlMW.s 			page 17


 469              	.L30:
 120:Core/Src/main.c ****     HAL_Delay(1000);
 470              		.loc 1 120 0 discriminator 1
 471 0020 4FF40051 		mov	r1, #8192
 472 0024 0948     		ldr	r0, .L32+8
 473 0026 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 474              	.LVL21:
 121:Core/Src/main.c **** 
 475              		.loc 1 121 0 discriminator 1
 476 002a 4FF47A70 		mov	r0, #1000
 477 002e FFF7FEFF 		bl	HAL_Delay
 478              	.LVL22:
 129:Core/Src/main.c **** 
 479              		.loc 1 129 0 discriminator 1
 480 0032 4FF0FF33 		mov	r3, #-1
 481 0036 0E22     		movs	r2, #14
 482 0038 0549     		ldr	r1, .L32+12
 483 003a 0348     		ldr	r0, .L32+4
 484 003c FFF7FEFF 		bl	HAL_UART_Transmit
 485              	.LVL23:
 486 0040 EEE7     		b	.L30
 487              	.L33:
 488 0042 00BF     		.align	2
 489              	.L32:
 490 0044 00000000 		.word	.LANCHOR0
 491 0048 00000000 		.word	huart2
 492 004c 00080240 		.word	1073874944
 493 0050 00000000 		.word	.LANCHOR1
 494              		.cfi_endproc
 495              	.LFE131:
 497              		.global	buffTX
 498              		.global	buffRX
 499              		.comm	hdma_usart2_rx,96,4
 500              		.comm	huart2,68,4
 501              		.section	.bss.buffRX,"aw",%nobits
 502              		.align	2
 503              		.set	.LANCHOR0,. + 0
 506              	buffRX:
 507 0000 00000000 		.space	12
 507      00000000 
 507      00000000 
 508              		.section	.data.buffTX,"aw",%progbits
 509              		.align	2
 510              		.set	.LANCHOR1,. + 0
 513              	buffTX:
 514 0000 48656C6C 		.ascii	"Hello World\015\012\000"
 514      6F20576F 
 514      726C640D 
 514      0A00
 515              		.text
 516              	.Letext0:
 517              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 518              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 519              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 520              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 521              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 522              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
ARM GAS  /tmp/ccdcmlMW.s 			page 18


 523              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 524              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 525              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 526              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 527              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 528              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 529              		.file 15 "/usr/include/newlib/sys/lock.h"
 530              		.file 16 "/usr/include/newlib/sys/_types.h"
 531              		.file 17 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 532              		.file 18 "/usr/include/newlib/sys/reent.h"
 533              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccdcmlMW.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccdcmlMW.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccdcmlMW.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccdcmlMW.s:101    .text.MX_GPIO_Init:0000000000000064 $d
     /tmp/ccdcmlMW.s:107    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccdcmlMW.s:113    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccdcmlMW.s:157    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccdcmlMW.s:162    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccdcmlMW.s:169    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccdcmlMW.s:202    .text.HAL_UART_RxCpltCallback:0000000000000020 $d
     /tmp/ccdcmlMW.s:207    .text.Error_Handler:0000000000000000 $t
     /tmp/ccdcmlMW.s:214    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccdcmlMW.s:240    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccdcmlMW.s:246    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccdcmlMW.s:290    .text.MX_USART2_UART_Init:000000000000002c $d
                            *COM*:0000000000000044 huart2
     /tmp/ccdcmlMW.s:296    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccdcmlMW.s:303    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccdcmlMW.s:423    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccdcmlMW.s:429    .text.main:0000000000000000 $t
     /tmp/ccdcmlMW.s:436    .text.main:0000000000000000 main
     /tmp/ccdcmlMW.s:490    .text.main:0000000000000044 $d
     /tmp/ccdcmlMW.s:513    .data.buffTX:0000000000000000 buffTX
     /tmp/ccdcmlMW.s:506    .bss.buffRX:0000000000000000 buffRX
                            *COM*:0000000000000060 hdma_usart2_rx
     /tmp/ccdcmlMW.s:502    .bss.buffRX:0000000000000000 $d
     /tmp/ccdcmlMW.s:509    .data.buffTX:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
HAL_UART_Receive_DMA
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_TogglePin
HAL_Delay
